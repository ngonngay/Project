/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package testSwing;

import java.util.ArrayList;
import java.util.List;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import scala.Array;
import vn.edu.vtc.bl.OrderBL;
import vn.edu.vtc.bl.ProductBL;
import vn.edu.vtc.persistance.Account;
import vn.edu.vtc.persistance.Order;
import vn.edu.vtc.persistance.Product;
import vn.edu.vtc.pl.OrderService;

/**
 *
 * @author asus
 */
public class CashierForm extends javax.swing.JFrame {

    /*
    My variables
     */
    DefaultTableModel defaultTableModel, defaultTableModel2;
    private Order order = new Order();
    private List<Product> localGottenProductOnSession=new ArrayList<>();
    private ProductBL productBL = new ProductBL();
    private Account account;
    /**
     * Creates new form CashierForm
     */
    public CashierForm() {
        initComponents();
        //this.account=account;
        defaultTableModel = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        defaultTableModel2 = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        tblProductListResultSearch.setModel(defaultTableModel);
        defaultTableModel.addColumn("Mã sản phẩm");
        defaultTableModel.addColumn("Tên sản phẩm");
        defaultTableModel.addColumn("SL");
        defaultTableModel.addColumn("Giá");
        tblProductListResultSearch.setComponentPopupMenu(popupProductListResultSearch);

        tblOrderProductList.setModel(defaultTableModel2);
        defaultTableModel2.addColumn("Tên sản phẩm");
        defaultTableModel2.addColumn("Đơn vị");
        defaultTableModel2.addColumn("Số lượng");
        defaultTableModel2.addColumn("Giá bán");
        defaultTableModel2.addColumn("Thành tiền");
        tblOrderProductList.setComponentPopupMenu(popupOrderProductList);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popupProductListResultSearch = new javax.swing.JPopupMenu();
        addToOrder = new javax.swing.JMenuItem();
        popupOrderProductList = new javax.swing.JPopupMenu();
        removeFromOrder = new javax.swing.JMenuItem();
        changeQuantity = new javax.swing.JMenuItem();
        panelProductManagement = new javax.swing.JPanel();
        labelForKeywordSearch = new javax.swing.JLabel();
        txtKeyWord = new javax.swing.JTextField();
        comboboxTypeSearch = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblProductListResultSearch = new javax.swing.JTable();
        labelForResult = new javax.swing.JLabel();
        btnSearch = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lblOrderId = new javax.swing.JLabel();
        lblDate = new javax.swing.JLabel();
        lblStaffName = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        lblStore = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        lblAddress = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblOrderProductList = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        labelTotalPrice = new javax.swing.JLabel();
        lblTotalPrice = new javax.swing.JLabel();
        labelCustomerMoney = new javax.swing.JLabel();
        lblCustomerMoney = new javax.swing.JLabel();
        labelForrReturnMonney = new javax.swing.JLabel();
        lblReturnMoney = new javax.swing.JLabel();
        btnCancel = new javax.swing.JButton();
        btnCheckout = new javax.swing.JButton();
        btnLogout = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();

        addToOrder.setText("Thêm vào hóa đơn");
        addToOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToOrderActionPerformed(evt);
            }
        });
        popupProductListResultSearch.add(addToOrder);

        removeFromOrder.setText("Xóa");
        removeFromOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeFromOrderActionPerformed(evt);
            }
        });
        popupOrderProductList.add(removeFromOrder);

        changeQuantity.setText("Chỉnh sửa số lượng ");
        changeQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeQuantityActionPerformed(evt);
            }
        });
        popupOrderProductList.add(changeQuantity);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Hình thức tìm kiếm");

        panelProductManagement.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Thông Tin Sản Phẩm    ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        labelForKeywordSearch.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        labelForKeywordSearch.setText("Nhập từ khóa :");

        txtKeyWord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtKeyWordActionPerformed(evt);
            }
        });

        comboboxTypeSearch.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        comboboxTypeSearch.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Hình thức tìm kiếm", "Tìm kiếm theo tên", "Tìm kiếm theo mã sản phẩm" }));
        comboboxTypeSearch.setSelectedItem(comboboxTypeSearch);
        comboboxTypeSearch.setBorder(null);
        comboboxTypeSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboboxTypeSearchActionPerformed(evt);
            }
        });

        tblProductListResultSearch.setAutoCreateRowSorter(true);
        tblProductListResultSearch.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã sản phẩm", "Tên sản phẩm", "SL", "Giá"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tblProductListResultSearch.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        tblProductListResultSearch.setColumnSelectionAllowed(true);
        tblProductListResultSearch.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tblProductListResultSearch.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tblProductListResultSearch.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(tblProductListResultSearch);
        tblProductListResultSearch.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        labelForResult.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        labelForResult.setText("Kết quả : ");

        btnSearch.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnSearch.setText("Tìm Kiếm");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelProductManagementLayout = new javax.swing.GroupLayout(panelProductManagement);
        panelProductManagement.setLayout(panelProductManagementLayout);
        panelProductManagementLayout.setHorizontalGroup(
            panelProductManagementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelProductManagementLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelProductManagementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelProductManagementLayout.createSequentialGroup()
                        .addGroup(panelProductManagementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(comboboxTypeSearch, 0, 330, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(txtKeyWord, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addContainerGap())
                    .addGroup(panelProductManagementLayout.createSequentialGroup()
                        .addGroup(panelProductManagementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelForResult, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelForKeywordSearch))
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelProductManagementLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        panelProductManagementLayout.setVerticalGroup(
            panelProductManagementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelProductManagementLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(comboboxTypeSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(labelForKeywordSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtKeyWord, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 20, Short.MAX_VALUE)
                .addComponent(labelForResult, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Thông tin hóa đơn   ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Số hóa đơn      :");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Ngày lập          :");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Tên Nhân Viên  :");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setText("Cơ sở kinh doanh :");

        lblStore.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblStore.setText("VTCA project 1");

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel9.setText("Địa chỉ               :");

        lblAddress.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblAddress.setText("Hà Nội");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblOrderId, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblStaffName, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblStore, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblOrderId, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblStore)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDate)
                    .addComponent(jLabel9)
                    .addComponent(lblAddress))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblStaffName, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(31, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Chi tiết sản phẩm   ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        tblOrderProductList.setAutoCreateRowSorter(true);
        tblOrderProductList.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tblOrderProductList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tên Sản Phẩm", "Đơn vị", "Số lượng", "Giá bán", "Thành tiền"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblOrderProductList);
        tblOrderProductList.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Thông tin thanh toán   ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        labelTotalPrice.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        labelTotalPrice.setText("Tổng Tiền :");
        labelTotalPrice.setToolTipText("Giá tiền được hiển thị sau khi đã được tính toán các khoản liên quan ");

        lblTotalPrice.setToolTipText("");

        labelCustomerMoney.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        labelCustomerMoney.setText("Tiền khách đưa :");

        labelForrReturnMonney.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        labelForrReturnMonney.setText("Tiền trả lại : ");

        btnCancel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnCancel.setText("Hủy");
        btnCancel.setToolTipText("");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnCheckout.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnCheckout.setText("Thanh toán");
        btnCheckout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckoutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(80, 80, 80)
                        .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(labelTotalPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblTotalPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelCustomerMoney, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblCustomerMoney, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(35, 35, 35)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(labelForrReturnMonney)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblReturnMoney, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnCheckout, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(labelTotalPrice, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                    .addComponent(lblTotalPrice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(labelCustomerMoney, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblCustomerMoney, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblReturnMoney, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(labelForrReturnMonney, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnCancel, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                    .addComponent(btnCheckout, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        labelTotalPrice.getAccessibleContext().setAccessibleDescription("Giá tiền được hiển thị sau khi đã được tính toán các khoản phụ phí  có liên quan ");

        btnLogout.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnLogout.setText("Đăng xuất");
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel5.setText("Tạo mới hóa đơn");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelProductManagement, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(280, 280, 280)
                        .addComponent(btnLogout, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnLogout, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(panelProductManagement, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txtKeyWordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtKeyWordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtKeyWordActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:
        int selected = JOptionPane.showConfirmDialog(this, "Hủy Hóa đơn?");
        if (selected == JOptionPane.YES_OPTION) {
            for (int i = 0; i < order.getProductList().size() ;i++) {
                for (int j = 0; j < localGottenProductOnSession.size(); j++) {
                    if (localGottenProductOnSession.get(j).getName().equals(order.getProductList().get(i).getName())) {
                        localGottenProductOnSession.get(j).setLeftQuantity(localGottenProductOnSession.get(j).getLeftQuantity()+order.getProductList().get(i).getAmount());
                        break;
                    }
                }
            }
            defaultTableModel.setRowCount(0);
            txtKeyWord.setText("");
            order=new Order();
            defaultTableModel2.setRowCount(0);
            lblTotalPrice.setText(OrderService.printPrice(OrderService.totalOrder(order)));
            return;
        }
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        if (comboboxTypeSearch.getSelectedItem().equals("Hình thức tìm kiếm")) {
            JOptionPane.showMessageDialog(this, "Vui Lòng chọn Hình thức tìm kiếm !", "Tìm kiếm sản phẩm", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (comboboxTypeSearch.getSelectedItem().equals("Tìm kiếm theo tên")) {
            //tìm kiếm theo tên
            JOptionPane.showMessageDialog(this, "Tìm kiếm theo tên");
            return;
        }
        String productId = txtKeyWord.getText();
        if (productId == null) {
            JOptionPane.showMessageDialog(this, "Vui Lòng nhập mã sản phẩm !", "Tìm kiếm sản phẩm", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (comboboxTypeSearch.getSelectedItem().equals("Tìm kiếm theo mã sản phẩm")) {
            boolean checkExistOnLocal=false;
            Product product =new Product();
            for (Product productLoop : localGottenProductOnSession) {
                if (productLoop.getProductId().equals(productId)){
                    product=productLoop;
                    checkExistOnLocal=true;
                    break;
                }
            }
            if (!checkExistOnLocal) {
                product= productBL.getById(productId);
                if (product!=null) {
                    localGottenProductOnSession.add(product);
                }
            }
            if (product != null) {
                
                defaultTableModel.setRowCount(0);
               
                for (Product productLoop : localGottenProductOnSession) {
                    if(productLoop.equals(product)){
                        defaultTableModel.addRow(new Object[]{productLoop.getProductId(), productLoop.getName(), productLoop.getLeftQuantity(), OrderService.printPrice(productLoop.getPrice())});
                    }
                    
                }
                
            } else {
                JOptionPane.showMessageDialog(this, "Không tìm thấy sản phẩm nào !", "Tìm kiếm sản phẩm", JOptionPane.ERROR_MESSAGE);
                return;
            }

        }

    }//GEN-LAST:event_btnSearchActionPerformed

    private void comboboxTypeSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboboxTypeSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboboxTypeSearchActionPerformed

    private void addToOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToOrderActionPerformed
        // TODO add your handling code here:
        int selected = JOptionPane.showConfirmDialog(this, "Thêm sản phẩm này vào hóa đơn?");
        if (selected == 0) {
            //yes
            int useRow = tblProductListResultSearch.getSelectedRow();
            if (useRow == -1) {
                JOptionPane.showMessageDialog(this, "Vui Lòng chọn sản phẩm !", "Thêm sản phẩm vào hóa đơn", JOptionPane.ERROR_MESSAGE);
            } else {
                String idSearch=String.valueOf(tblProductListResultSearch.getValueAt(useRow, 0));
                Product product=new Product();
                
                for (Product product1 : localGottenProductOnSession) {
                    if (product1.getProductId()==idSearch) {
                        product=product1;
                        break;
                    }
                }
                int amount = -1;
                try {
                    amount = Integer.valueOf(JOptionPane.showInputDialog("Nhập số lượng : \n Tối đa " + product.getLeftQuantity(), 1));
                    if (amount>product.getLeftQuantity()) {
                        JOptionPane.showMessageDialog(this, "Vượt Quá số lượng tối đa trong hệ thống!", "Lỗi dữ liệu", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                    if (amount<0||amount==0) {
                        JOptionPane.showMessageDialog(this, "Số lượng phải lớn hơn 0", "Lỗi dữ liệu", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, "Vui lòng nhập số lượng", "Lỗi dữ liệu", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                for (Product product2 : localGottenProductOnSession) {
                    if (product2.getProductId().equals(product.getProductId())) {
                        product2.setLeftQuantity(product2.getLeftQuantity()-amount);
                        break;
                    }
                }
                //JOptionPane.showMessageDialog(this, product.getDiscounted());
                boolean check = false;

                for (int i = 0; i < order.getProductList().size(); i++) {
                    if (order.getProductList().get(i).getProductId().equals(product.getProductId())){
                        order.getProductList().get(i).setAmount(order.getProductList().get(i).getAmount()+amount);
                        check=true;
                        break;
                    }
                }
                if (check == false) {
                    product.setAmount(amount);
                    order.getProductList().add(product);
                }
                //insert into tblOrderProductList
                defaultTableModel2.setRowCount(0);

                for (Product product1 : order.getProductList()) {
                    defaultTableModel2.addRow(new Object[]{product1.getName(), "Lẻ", product1.getAmount(), OrderService.printPrice(product1.getPrice()), OrderService.printPrice(OrderService.Total(product1))});
                }
                lblTotalPrice.setText(OrderService.printPrice(OrderService.totalOrder(order)));
                //update data in tblProductListResultSearch
                defaultTableModel.setRowCount(0);
                for (Product product2 : localGottenProductOnSession) {
                    if(product2.getProductId().equals(product.getProductId())){
                        defaultTableModel.addRow(new Object[]{product2.getProductId(), product2.getName(), product2.getLeftQuantity(), OrderService.printPrice(product2.getPrice())});
                    }
                }
            }
            return;
        }
        if (selected == 1 || selected == 2) {
            //no
            return;
        }

    }//GEN-LAST:event_addToOrderActionPerformed

    private void removeFromOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeFromOrderActionPerformed
        // TODO add your handling code here:
        int selected = JOptionPane.showConfirmDialog(this, "Xóa sản phẩm này?");
        if (selected == 0) {
            //yes
            int useRow = tblOrderProductList.getSelectedRow();
            if (useRow == -1) {
                JOptionPane.showMessageDialog(this, "Vui Lòng chọn sản phẩm !", "Xóa", JOptionPane.ERROR_MESSAGE);
            } else {
                String name = String.valueOf(tblOrderProductList.getValueAt(useRow, 0));
                //xoa san pham khoi list trong order
                Product tempProduct=new Product();
                for (Product p : order.getProductList()) {
                    if (p.getName().equals(name)) {
                        tempProduct=p;
                        order.getProductList().remove(p);
                        break;
                    }
                }
                //tang so luong cua san pham trong localProductList...
                for (int i = 0; i < localGottenProductOnSession.size(); i++) {
                    if (localGottenProductOnSession.get(i).getName().equals(name)) {
                        localGottenProductOnSession.get(i).setLeftQuantity(localGottenProductOnSession.get(i).getLeftQuantity()+tempProduct.getAmount());
                        break;
                    }
                }
                //load lai data cua list product trong order
                defaultTableModel2.setRowCount(0);
                for (Product product1 : order.getProductList()) {
                    defaultTableModel2.addRow(new Object[]{product1.getName(), "Lẻ", product1.getAmount(), OrderService.printPrice(product1.getPrice()), OrderService.printPrice(OrderService.Total(product1))});
                }
                lblTotalPrice.setText(OrderService.printPrice(OrderService.totalOrder(order)));
                //load lai data cua listProductSearch
                defaultTableModel.setRowCount(0);
                for (Product product2 : localGottenProductOnSession) {
                    if(product2.getName().equals(name)){
                        defaultTableModel.addRow(new Object[]{product2.getProductId(), product2.getName(), product2.getLeftQuantity(), OrderService.printPrice(product2.getPrice())});
                    }
                }
            }
            return;
        }
        if (selected == 1 || selected == 2) {
            //no
            return;
        }
    }//GEN-LAST:event_removeFromOrderActionPerformed

    private void changeQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeQuantityActionPerformed
        // TODO add your handling code here:

        int useRow = tblOrderProductList.getSelectedRow();
        if (useRow == -1) {
            JOptionPane.showMessageDialog(this, "Vui Lòng chọn sản phẩm !", "Chỉnh sửa số lượng của sản phẩm trong hóa đơn", JOptionPane.ERROR_MESSAGE);
        } else {

            String productName = String.valueOf(tblOrderProductList.getValueAt(useRow, 0));
            //JOptionPane.showMessageDialog(this, productName, "Chỉnh sửa số lượng của sản phẩm trong hóa đơn", JOptionPane.ERROR_MESSAGE);
            int amount = -1;
            try {
                for (Product product : order.getProductList()) {
                    if (product.getName().equals(productName)) {
                        amount = Integer.valueOf(JOptionPane.showInputDialog("Nhập số lượng : \n Tối đa " + product.getLeftQuantity(), 1));
                        if (amount<product.getAmount()) {
                            for (int i = 0; i < localGottenProductOnSession.size() ;i++) {
                                if (localGottenProductOnSession.get(i).getName().equals(productName)){
                                    localGottenProductOnSession.get(i).setLeftQuantity(localGottenProductOnSession.get(i).getLeftQuantity()+(product.getAmount()-amount));
                                    break;
                                }
                            }
                        }else if (amount > product.getAmount()) {
                            for (int i = 0; i < localGottenProductOnSession.size() ;i++) {
                                if (localGottenProductOnSession.get(i).getName().equals(productName)){
                                    localGottenProductOnSession.get(i).setLeftQuantity(localGottenProductOnSession.get(i).getLeftQuantity()-(amount-product.getAmount()));
                                    break;
                                }
                            }
                        }
                        product.setAmount(amount);
                    }
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Vui lòng nhập số lượng", "Lỗi dữ liệu", JOptionPane.ERROR_MESSAGE);
            }
            //load lai data cua listProductSearch
        defaultTableModel.setRowCount(0);
        for (Product product2 : localGottenProductOnSession) {
            if(product2.getName().equals(productName)){
                defaultTableModel.addRow(new Object[]{product2.getProductId(), product2.getName(), product2.getLeftQuantity(), OrderService.printPrice(product2.getPrice())});
            }
        }
        }
        defaultTableModel2.setRowCount(0);
        for (Product product1 : order.getProductList()) {
            defaultTableModel2.addRow(new Object[]{product1.getName(), "Lẻ", product1.getAmount(), OrderService.printPrice(product1.getPrice()), OrderService.printPrice(OrderService.Total(product1))});
        }
        lblTotalPrice.setText(OrderService.printPrice(OrderService.totalOrder(order)));
        
    }//GEN-LAST:event_changeQuantityActionPerformed

    private void btnCheckoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckoutActionPerformed
        // TODO add your handling code here:
        int selected = JOptionPane.showConfirmDialog(this, "Thanh toán?");
        if (selected == JOptionPane.CANCEL_OPTION||selected==JOptionPane.NO_OPTION) {
            return;
        }
        if(selected == JOptionPane.YES_OPTION){
            if(order.getProductList().isEmpty()){
                JOptionPane.showMessageDialog(this, "Vui Lòng thêm sản phẩm vào hóa đơn", "Thanh toán", JOptionPane.ERROR_MESSAGE);
                return;
            }
            //thoanh toán.
            OrderBL orderBL=new OrderBL();
            for (Product p:order.getProductList()) {
                if (p.getAmount()==0){
                    order.getProductList().remove(p);
                }
            }
            order.setStaff_id(1);//sửa staffid
            order.setStore_id(1);
            order=orderBL.createOrder(order);
            int select=JOptionPane.showConfirmDialog(this, "Bạn có muốn in hóa đơn");
            if (select==JOptionPane.YES_OPTION) {
                //in hóa đơn
                order=new Order();
                defaultTableModel2.setRowCount(0);
            }
        }
        
    }//GEN-LAST:event_btnCheckoutActionPerformed

    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
        // TODO add your handling code here:
        Login login=new Login();
        login.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnLogoutActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CashierForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CashierForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CashierForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CashierForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CashierForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem addToOrder;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnCheckout;
    private javax.swing.JButton btnLogout;
    private javax.swing.JButton btnSearch;
    private javax.swing.JMenuItem changeQuantity;
    private javax.swing.JComboBox<String> comboboxTypeSearch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel labelCustomerMoney;
    private javax.swing.JLabel labelForKeywordSearch;
    private javax.swing.JLabel labelForResult;
    private javax.swing.JLabel labelForrReturnMonney;
    private javax.swing.JLabel labelTotalPrice;
    private javax.swing.JLabel lblAddress;
    private javax.swing.JLabel lblCustomerMoney;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblOrderId;
    private javax.swing.JLabel lblReturnMoney;
    private javax.swing.JLabel lblStaffName;
    private javax.swing.JLabel lblStore;
    private javax.swing.JLabel lblTotalPrice;
    private javax.swing.JPanel panelProductManagement;
    private javax.swing.JPopupMenu popupOrderProductList;
    private javax.swing.JPopupMenu popupProductListResultSearch;
    private javax.swing.JMenuItem removeFromOrder;
    private javax.swing.JTable tblOrderProductList;
    private javax.swing.JTable tblProductListResultSearch;
    private javax.swing.JTextField txtKeyWord;
    // End of variables declaration//GEN-END:variables
}
